import StatsAPI from './StatsAPI';
import WidgetLoader from './WidgetLoader';

// placeholder empty function => true
let noop = () => true;

function parseFragment(fragment) {
  let result = $.parseHTML(fragment.html());
  $(result).attr('id', $(fragment).attr('id'));
  fragment.remove();
  return $(result).eq(result.length-1);
}

/*
  Defines a simple widget - tries to correspond to the Gridstack API
  - every widget has an API instance to control itself from within. That means
    that if 1 call is busy being executed, it will not stop the other charts from
    rendering their own data.
 */
class DraggableZWidget {

  constructor(name, config) {

    this.name = name || 'widget';
    this.template = config.template || false;
    this.elementId = config.elementId || undefined;
    this.initialized = false;

    this.widgetLayout = $.extend({
      el: null,
      x: 0,
      y: 0,
      width: 1,
      height: 1,
      id: null
    }, config.widgetLayout || {});

    this.events = {
      render: [],
      received: [],
      loading: [],
      loaded: []
    };

    // extend the users set of actions versus a default implemented few
    this.actions = $.extend({
      refresh: function() {
        this.pull();
      }
    }, config.actions || {});

    // api-specific
    this.api                = new StatsAPI(config.api || {});

    // chartjs-specific
    this.chart = null;

    this.chartHeight = config.chartHeight || false;
    this.chartScrollable = config.chartScrollable || false;

    this.chartOptions = $.extend({
      type: 'line',
      data: {},
      options: {}
    }, config.chart || {});

    // configure the widget loader
    this.loader = new WidgetLoader($(this.template).find('.widget-loader'), this, config.loaderText || null);

    // wire all the implemented services
    if(this.template) {
      return this._start();
    } else {
      return this;
    }

  }

  // injects a grid widget to the frontend
  inject(grid) {

    let widget, template;

    if(this.template) {
      template = $(this.template);

      // set html in grid
      grid.container.append(template);

      // append the attributes
      template.attr('data-gs-width', this.widgetLayout.width);
      template.attr('data-gs-height', this.widgetLayout.height);
      template.attr('data-gs-x', this.widgetLayout.x);
      template.attr('data-gs-y', this.widgetLayout.y);
      template.attr('data-gs-no-resize', true);
      template.attr('id', this.elementId);

      widget = grid.makeWidget(`#${this.elementId}`);

      this.dispatchEvent('render', this, () => {
        this.initialized = true;
      });

      // create dead simple action listeners
      for(let a in this.actions) {
        $(this.template).find(`a[href="widget:${a}"]`).bind('click', e => {
          e.preventDefault();
          if(this.actions[a] instanceof Function) this.actions[a].apply(this, e);
        });
      }

    } else {

      // we have no template?

    }

  }

  // event trigger
  on(evt, cb = noop) {

    let add = (evt,cb) => this.events[evt].push(cb);

    if(cb instanceof Array) {
      cb.forEach(cba => add(evt, cba));
    } else {
      if(this.events[evt]) {
        add(evt, cb)
      }
    }

    return this;
  }

  dispatchEvent(evt, data = {}, cb = noop) {
    if(this.events[evt]) {
      this.events[evt].forEach(callback => {
        if(callback instanceof Function) {
          callback.apply(this);
          cb();
        }
      });
    }

    return this;
  }

  pull() {
    return this.api.fetch();
  }

  // chainable configuration method for parsing html on
  // the fly. This function is called upon initialization and should not
  // be called afterwards. It will create html on the fly from a string
  // and can populate variable stuff handlebars-style.
  context(scope, content) {
    return this._start();
  }

  // starts drawing the chart into widget-chart
  createChart() {

    let c,
        ctx = this.template.find('.widget-chart canvas');

    if(ctx.length) {

      if(this.chartHeight) {
        ctx[0].height = this.chartHeight;
      }

      // merges chart layout configuration into the dataset configuration
      if(this.chartOptions.dataLayout) {
        this.chartOptions.data.datasets.forEach((dataset, i) => {
          if(this.chartOptions.dataLayout[i]) {
            for(let prop in this.chartOptions.dataLayout[i]) {
              dataset[prop] = this.chartOptions.dataLayout[i][prop];
            }
          }
        });
      }

      c = new Chart(ctx[0], this.chartOptions);
      $(this.template).data('chart', c);
      this.chart = c;

    }

  }

  // internal working-togethers
  _start() {
    // after we pulled, start drawing the canvas
    this.api.on('receive', res => this.chartOptions.data = res.data);
    this.loader.on('stopped', () => this.createChart());
    this.pull();

    return this;
  }

}

/*
  class DraggableUI
    - controls draggable grids
 */
class DraggableZ {

  constructor(context, widgets) {
    this.ctx = $(context);
    this.grid = null;
    this.widgets = [];
    return this.initialise(widgets);
  }

  initialise(prefabWidgets) {

    this.ctx.gridstack({
      animate: true,
      disableResize: true,
      cellHeight: 50,
      draggable: {
        handle: '.widget-handle',
        appendTo: 'body',
        scroll: false
      }
    });

    // apply initialized grid api to the controller
    // class.
    this.grid = this.ctx.data('gridstack');

    if(prefabWidgets) {
      this.prefabricated(prefabWidgets);
    }

    return this;

  }

  widget(name, options) {

    let widget;

    if(options.template.length && options.template) {
      options.template = parseFragment(options.template);
    }

    if(name) {
      this.widgets[name] = widget = new DraggableZWidget(name, options);
    } else {
      console.log('A name has to be given.');
    }

    return widget;

  }

  widgetFabricated(widget) {
    if(!widget instanceof DraggableZWidget) {
      console.log('A widget has to be an instance of DraggableUIWidget [use DraggableUI.fabricate(name,options)]');
    } else {
      this.widgets[widget.name] = widget;
    }
    return this;
  }

  prefabricated(widgets) {
    if(!widgets instanceof Array) {
      console.log('`widgets` has to be of type Array');
    } else {
      widgets.forEach(widget => this.widgetFabricated(widget));
    }

    this.draw();
  }

  draw() {

    let gs = this.grid;

    // renders all the defined widgets to the grid
    for(let w in this.widgets) {
      gs.batchUpdate();
      let widget = this.widgets[w];
      widget.inject(gs);
      gs.commit();
    }

    return this;
  }

}

// utility function for defining widgets outside
// of the interface container. usefull for ripping apart
// widget-specific code and organize modularity. duplicates
// the method with changes, but can be injected in an instance.
function fabricate(name, options) {

  let widget;

  // check for the template
  if(options.template && options.template.length) {
    options.template = parseFragment(options.template);
  }

  if(name) {
    widget = new DraggableZWidget(name, options);
  } else {
    console.log('A name has to be given.');
  }

  return widget;

}

// export the DraggableZ
export default DraggableZ;

// a configuration of colors to use in the charts:
// configured with coolors.io: https://coolors.co/331832-1d3461-396494-ed5e8b-82204a
export const colors = {
  darkPurple: '#331832',
  spaceCadet: '#1D3461',
  queenBlue: '#396494',
  strawBerry: '#ED5E8B',
  pansyPurple: '#82204A'
}

// export utilities utilities
export { DraggableZWidget, parseFragment, fabricate };
