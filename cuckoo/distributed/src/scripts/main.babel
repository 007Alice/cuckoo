import DraggableUI from './lib/DraggableUI';
import StatsApi from './lib/StatsApi';
import SVGLoader from './lib/SVGLoader';

window.loadedSVG = [];

$(function() {

  // create UI instance
  const UI = new DraggableUI(document.getElementById('grid'));

  // callback function for the widgets to perform some after-init stuff, graphs will
  // be initialized here as well.
  function onWidgetRender() {
    SVGLoader.loadPlaceholders($(this.template.find('[data-svg-src]')));
  }

  UI.widget('tasks_completed', {
    template: $("#widget--tasks-complete"),
    widgetLayout: {
      width: 6,
      height: 5,
      x: 0,
      y: 0
    },
    request: 'task_completed',
    loaderText: 'Loading completed tasks'
  }).on('render', [onWidgetRender]);

  // UI.widget('tasks_uncompleted', {
  //   template: $("#widget--tasks-incomplete"),
  //   widgetLayout: {
  //     width: 6,
  //     height: 5,
  //     x: 6,
  //     y: 0
  //   },
  //   request: 'task_uncompleted',
  //   loaderText: 'Loading uncompleted tasks'
  // }).on('render', [onWidgetRender]);

  UI.draw();

});

// underneath code is going to be a single instance per widget to allow for asynchronous
// requests. That means that the UI won't break entirely if some request is failing, the others
// keep on working. This implementation is because some calls would take longer than the other,
// making it a hell to load this page properly without lacking a lot of UX (waiting on the other
// elements etc.) stay tuned.

// // create API wrapper instance
// const API = new StatsApi();
//
// // api event: request sent
// API.on('request', data => {
//   // console.log('API started a request.');
// });
//
// // api event: request received
// API.on('receive', data => {
//   // console.log('API resolved a request successfull.');
// });
//
// // api event: errored somewhere
// API.on('error', err => {
//   // console.log('API gave an error.');
// });

// 1: fetching data with the api
// API.fetch('task_completed').then(data => {
//   console.log(data);
// }).catch(err => {
//   console.log(err);
// });
