{"version":3,"sources":["src/dndupload.js"],"names":[],"mappings":"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","file":"dndupload.js","sourcesContent":["/*\n * Copyright (C) 2010-2013 Claudio Guarnieri.\n * Copyright (C) 2014-2016 Cuckoo Foundation.\n * This file is part of Cuckoo Sandbox - http://www.cuckoosandbox.org\n * See the file 'docs/LICENSE' for copying permission.\n *\n */\n\n/**\n * An abstract HTML widget for file uploads.\n *\n * Supports:\n *   - Multiple files\n *   - Drag & Drop OR file dialog\n *   - Progress bar\n *   - Minimum size on screen: 300x230\n *\n *   Required parameter `target` takes a CSS selector inside which\n *   the necessary HTML is spawned. Multiple of these widgets can exist on\n *   one page due to OOP.\n */\nclass DndUpload {\n    constructor(target, endpoint, success_callback) {\n        this.endpoint = endpoint;\n        this._success_callback = success_callback;\n        this._selectors = {\n            \"uid\": `dndupload_${DndUpload.generateUUID()}`,\n            \"target\": target\n        };\n\n        this._bound = false;\n    }\n\n    /**\n     * Clears `target`, appends HTML and binds events (if necessary)\n     * @return\n     */\n    draw(){\n        $(this._selectors[\"target\"]).empty();\n\n        let html = `\n            <div class=\"dndupload\" id=\"${this._selectors[\"uid\"]}\">\n                <form id=\"uploader\" action=\"/submit/api/presubmit\" method=\"POST\" enctype=\"multipart/form-data\">\n                    <div id=\"container\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"43\" viewBox=\"0 0 50 43\">\n                            <path d=\"M48.4 26.5c-.9 0-1.7.7-1.7 1.7v11.6h-43.3v-11.6c0-.9-.7-1.7-1.7-1.7s-1.7.7-1.7 1.7v13.2c0 .9.7 1.7 1.7 1.7h46.7c.9 0 1.7-.7 1.7-1.7v-13.2c0-1-.7-1.7-1.7-1.7zm-24.5 6.1c.3.3.8.5 1.2.5.4 0 .9-.2 1.2-.5l10-11.6c.7-.7.7-1.7 0-2.4s-1.7-.7-2.4 0l-7.1 8.3v-25.3c0-.9-.7-1.7-1.7-1.7s-1.7.7-1.7 1.7v25.3l-7.1-8.3c-.7-.7-1.7-.7-2.4 0s-.7 1.7 0 2.4l10 11.6z\"/>\n                        </svg>\n    \n                        <input type=\"file\" name=\"files[]\" id=\"file\" class=\"holder_input\" data-multiple-caption=\"{count} files selected\" multiple=\"\">\n                        <label for=\"file\" id=\"info\">\n                            <strong>Choose files</strong>\n                            <span class=\"box__dragndrop\"> or drag them here</span>.\n                        </label>\n    \n                        <button type=\"submit\" class=\"holder_button\">Upload</button>\n    \n                        <progress id=\"uploadprogress\" min=\"0\" max=\"100\" value=\"0\">0</progress>\n                    </div>\n                </form>\n            </div>\n\n            <p id=\"filereader\">File API &amp; FileReader API not supported</p>\n            <p id=\"formdata\">XHR2's FormData is not supported</p>\n            <p id=\"progress\">XHR2's upload progress isn't supported</p>\n        `;\n\n        $(this._selectors[\"target\"]).append(html);\n        if(!this._bound) this._bind();\n    }\n\n    /**\n     * Builds references to form elements and creates events.\n     * @return\n     */\n    _bind(){\n        let _self = this;\n        let holder = document.querySelector(`div#${_self._selectors[\"uid\"]}`);\n\n        // save references to the HTML tags that belong exclusively to this widget in\n        // _self._selectors to avoid global namespace pollution.\n        _self._selectors[\"holder\"] = holder;\n        _self._selectors[\"progress\"] = document.querySelector(_self._selectors[\"target\"])\n            .querySelector(\"progress#uploadprogress\");\n        _self._selectors[\"upload\"] = holder.querySelector(\"upload\");\n        _self._selectors[\"form\"] = holder.querySelector(\"form#uploader\");\n\n        // test the current browser capabilities\n        _self._selectors[\"tests\"] = {\n            filereader: typeof FileReader != \"undefined\",\n            dnd: \"draggable\" in document.createElement(\"span\"),\n            formdata: !!window.FormData,\n            progress: \"upload\" in new XMLHttpRequest\n        };\n\n        // keeping track of informative HTML tags\n        _self._selectors[\"support\"] = {\n            filereader: document.getElementById(\"filereader\"),\n            formdata: document.getElementById(\"formdata\"),\n            progress: document.getElementById(\"progress\")\n        };\n\n        \"filereader formdata progress\".split(\" \").forEach(function(api){\n            if (_self._selectors[\"tests\"][api] === false) {\n                _self._selectors[\"support\"][api].className = \"fail\";\n            } else {\n                _self._selectors[\"support\"][api].className = \"hidden\";\n            }\n        });\n\n        // listen for changes on the input tag. If a user choose a file manually; fire the\n        // form submit programmatically\n        _self._selectors[\"holder\"].querySelector('input[type=\"file\"]').addEventListener(\"change\", function(e){\n            var event = document.createEvent(\"HTMLEvents\");\n            event.initEvent(\"submit\", true, false);\n            _self._selectors[\"form\"].dispatchEvent( event );\n        });\n\n        // do our own thing when the form is submitted\n        _self._selectors[\"form\"].addEventListener('submit', function(e){\n            e.preventDefault();\n            this._process_files();\n        }.bind(this));\n\n        // test for drag&drop\n        if (_self._selectors[\"tests\"].dnd){\n            // change appearance while drag&dropping\n            holder.querySelector(\"form#uploader\").ondragover = function(){\n                this.className = \"hover\";\n                return false;\n            };\n\n            holder.querySelector(\"form#uploader\").ondragend = function(){\n                this.className = \"\";\n                return false;\n            };\n\n            [\"dragleave\", \"dragend\", \"drop\"].forEach(function(event){\n                holder.querySelector(\"form#uploader\").addEventListener(event, function(){\n                    //form.classList.remove( \"is-dragover\" );\n                    this.classList.remove(\"hover\");\n                });\n            });\n\n            // process the files on drop\n            holder.querySelector(\"form#uploader\").ondrop = function(e){\n                this.className = \"\";\n                e.preventDefault();\n\n                _self._process_files(e.dataTransfer.files);\n            };\n        } else {\n            this._selectors[\"upload\"].className = \"hidden\";\n            this._selectors[\"upload\"].querySelector(\"input\").onchange = function(){\n                _self._process_files(this.files);\n            };\n        }\n\n        this._bound = true;\n    }\n\n    /**\n     * Reads the files and creates FormData\n     * @return\n     */\n    _process_files(files) {\n        let _self = this;\n        let formdata = new FormData();\n\n        if(_self._selectors[\"holder\"].querySelector('input[type=\"file\"]').files && !files){\n            formdata = new FormData(_self._selectors[\"form\"]);\n        } else {\n            for(var i = 0; i < files.length; i++){\n                formdata.append(\"files[]\", files[i]);\n            }\n        }\n\n        if(formdata){\n            // send the data to the API endpoint\n            this._upload(formdata);\n        }\n    }\n\n    /**\n     * Sends FormData to the endpoint\n     * @return\n     */\n    _upload(formdata){\n        let _self = this;\n        let xhr = new XMLHttpRequest();\n\n        this.display_text(\"Uploading\");\n        formdata[\"type\"] = \"files\";\n\n        xhr.open('POST', this.endpoint);\n\n        // update progress bar when server response is received\n        xhr.onload = function(){\n            _self._selectors[\"progress\"].value = _self._selectors[\"progress\"].innerHTML = 100;\n        };\n\n        xhr.onreadystatechange = function(){\n            if(xhr.readyState === 4){\n                if(xhr.status == 200){\n                    _self.display_text(\"Done\");\n\n                    setTimeout(function() {\n                        _self._success_callback(xhr)\n                    }, 600);\n                } else if(xhr.status == 0) {\n\n                } else {\n                    _self.display_text(`Error: http.status = ${xhr.status} OR response.status not OK`);\n                }\n            }\n        };\n\n        // update progress bar while uploading\n        if(this._selectors[\"tests\"].progress){\n            xhr.upload.onprogress = function(event){\n                if(event.lengthComputable){\n                    let complete = (event.loaded / event.total*100 | 0);\n                    _self._selectors[\"progress\"].value = _self._selectors[\"progress\"].innerHTML = complete;\n                }\n            }\n        }\n\n        xhr.send(formdata);\n    }\n\n    /**\n     * Changes the text displayed to the user\n     * @return\n     */\n    display_text(text){\n        let info = $(this._selectors[\"form\"].querySelector(\"label#info\"));\n        info.html(text);\n    }\n\n    /**\n     * Generates UUID\n     * @return\n     */\n    static generateUUID(){\n        return (new Date).getTime();\n    }\n}"]}