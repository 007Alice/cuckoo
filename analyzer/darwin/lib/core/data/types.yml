# ===============================================
# Basic types
#
int: &int
    # We will print it with something like printf("%d", value)
    printf_specifier: "%d"
    # Is it a native C type (on OS X)?
    native: Yes
# Alternative name for backward compatibility—Ö
integer: *int

unsigned int: &unsigned-int
    printf_specifier: "%ld"
    native: Yes

long: &long
    printf_specifier: "%l"
    native: Yes

unsigned long: &unsigned-long
    printf_specifier: "%lu"
    native: Yes

unsigned long long: &unsigned-long-long
    printf_specifier: "%llu"
    native: Yes

size_t: *unsigned-long-long

char: &char
    printf_specifier: '"%c"'
    native: Yes

float: &float
    printf_specifier: "%f"
    native: Yes

double: &double
    printf_specifier: "%f"
    native: Yes
#
# Raw pointers: just dump their values (in *decimal* since dtrace will output
# JSON that doesn't accept hex values)
#
"void *": *unsigned-long-long
#
# Strings
#
"char *": &char-pointer
    printf_specifier: '"%S"'
    native: No
    template: |-
        ${ARG} != (int64_t)NULL ? copyinstr(${ARG}) : "<NULL>"
#
# Arbitrary buffers
#
#buffer: &buffer
#    printf_specifier: '"%S"'
#    native: No
#    template: |-
#        ${ARG} != (int64_t)NULL ? stringof(copyin(${ARG}, ${SIZE_ARG})) : "<NULL>"
#
# Fixed length C types
#
int8_t: &int8_t
    printf_specifier: "%d"
    native: Yes

uint8_t: &uint8_t
    printf_specifier: "%u"
    native: Yes

int16_t: &int16_t
    printf_specifier: "%d"
    native: Yes

uint16_t: &uint16_t
    printf_specifier: "%u"
    native: Yes

int32_t: &int32_t
    printf_specifier: "%d"
    native: Yes

uint32_t: &uint32_t
    printf_specifier: "%u"
    native: Yes

int64_t: &int64_t
    printf_specifier: "%lld"
    native: Yes

uint64_t: &uint64_t
    printf_specifier: "%llu"
    native: Yes
#
# Structures
#

# TBD

#
# Your custom data types
#
foo_t:
    native: No
    struct:
         hash: "int"
         base: "kkk_t *"
         description: "char *"
        
kkk_t:
    native: No
    struct:
        abc: "double *"
        hfa: "size_t"
        sss: "char *"

bar_t:
    native: No
    struct:
        lkj: "foo_t *"
        aaa: "float"
